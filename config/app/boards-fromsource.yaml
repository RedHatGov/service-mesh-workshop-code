# Note: the template uses S2I which pulls from git and builds the container image from source code then deploys.
# Usage example:
# oc new-app -f ./boards-fromsource.yaml \
#     -p APPLICATION_NAME=boards \
#     -p NODEJS_VERSION_TAG=10 \
#     -p GIT_URI=https://github.com/dudash/openshift-microservices.git \
#     -p GIT_BRANCH=develop \
#     -p DATABASE_SERVICE_NAME=boards-mongodb \
#     -p MONGODB_DATABASE=boardsDevelopment
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: boards-fromsource
message: A new boards web service has been created in your project along with it's mongodb
metadata:
  annotations:
    description: An boards application for the microservices demo
    openshift.io/display-name: boards
    template.openshift.io/long-description: This template defines the boards microservice
  name: boards-fromsource
objects:
# -----------------------------------------------------------------------------
# Node.js App Section
# -----------------------------------------------------------------------------
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      version: ${APP_VERSION_TAG}
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
      name: http
    selector:
      deploymentconfig: ${APPLICATION_NAME}
  status:
    loadBalancer: {}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      application: ${APPLICATION_NAME}
      version: ${APP_VERSION_TAG}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          application: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
          version: ${APP_VERSION_TAG}
        annotations:
          sidecar.istio.io/inject: "true"
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_SERVICE_HOST
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_SERVICE_PORT
            value: '27017'
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      application: ${APPLICATION_NAME}
      version: ${APP_VERSION_TAG}
    name: ${APPLICATION_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: code/boards
      git:
        ref: ${GIT_BRANCH}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: 'nodejs:${NODEJS_VERSION_TAG}'
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: 1ee531e8754cceaa
      type: Generic
    - github:
        secret: e7d3062bfd0f73e4
      type: GitHub
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      application: ${APPLICATION_NAME}
      version: ${APP_VERSION_TAG}
    name: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: false
# -----------------------------------------------------------------------------
# MongoDB Section
# -----------------------------------------------------------------------------
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      application: ${APPLICATION_NAME}
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-admin-password: ${MONGODB_ADMIN_PASSWORD}
    database-name: ${MONGODB_DATABASE}
    database-password: ${MONGODB_PASSWORD}
    database-user: ${MONGODB_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    labels:
      application: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
      version: ${MONGODB_VERSION}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mongo
      nodePort: 0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    application: ${APPLICATION_NAME}
    name: ${DATABASE_SERVICE_NAME}
    labels:
      application: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${MONGODB_VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
      version: ${MONGODB_VERSION}
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          app: ${APPLICATION_NAME}
          deploymentConfig: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
          version: ${MONGODB_VERSION}
        annotations:
          sidecar.istio.io/inject: "true"
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MONGODB_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: ${MONGODB_NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
# -----------------------------------------------------------------------------
# Parameters Section
# -----------------------------------------------------------------------------
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: boards
- description: The version to tag the app with
  displayName: app version tag
  name: APP_VERSION_TAG
  required: true
  value: 'latest'
- description: The source code URI
  displayName: git URI
  name: GIT_URI
  required: true
  value: 'https://github.com/dudash/openshift-microservices.git'
- description: The source code branch
  displayName: git branch
  name: GIT_BRANCH
  required: true
  value: master
- description: The nodejs version tag to uses
  displayName: Node.js version tag
  name: NODEJS_VERSION_TAG
  required: true
  value: '10'
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MONGODB_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the MongoDB ImageStream resides.
  displayName: MongoDB Namespace
  name: MONGODB_NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: boards-mongodb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true
- description: Password for the MongoDB connection user.
  displayName: MongoDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true
- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  required: true
  value: sampledb
- description: Password for the database admin user.
  displayName: MongoDB Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: MONGODB_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of MongoDB image to be used (e.g. 3.6 or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: "3.6"